{"ast":null,"code":"/**\n * Below is the usage of service function\n * import APICALL from {../give-proper-path-whearver you are importing it}\n * URLENDPOINT is the ENDPOINT of the API CAll\n * httpmethod can be GET, PUT, POST, DELETE etc.\n * data is the json object which you want to send to the backend using post, put, delete and update methods\n * APICALL.service(URLENDPOINT, httpmethod, data)\n *  .then(result => {\n *  use ur result.json()  object here whatever you want to do.\n * })\n */\nconst proxy_url = \"https://cors-anywhere.herokuapp.com/\";\nexport const APICALL = {\n  service,\n  serviceForSitesJSON,\n  headers,\n  get_url_extension,\n  proxy_url\n};\n\nfunction get_url_extension(url) {\n  return url.split(/[#?]/)[0].split(\".\").pop().trim();\n}\n/*\nthis is for the fetch which will return the sites JSON,which will be executed bofore fetching the ,\nsince at that time we're using env file to get the backend url,\ntherefore writing a separate function for that.\n*/\n\n/*\n *Call to the API\n *@param urlendpoint=urlendpoint of the API\n *@param httpmethod=METHOD\n *@param data=data to the API\n *@returns response from the APIsettings\n */\n\n\nfunction serviceForSitesJSON(urlendpoint = \"\", httpmethod = \"\", data = \"\") {\n  // Default options are marked with *\n  return fetch(process.env.REACT_APP_serverURL + urlendpoint, headers(data, httpmethod)).then( // parses JSON response into native Javascript objects\n  result => result.json()).then(result => {\n    return result;\n  });\n}\n/*\n *Call to the API\n *@param urlendpoint=urlendpoint of the API\n *@param httpmethod=METHOD\n *@param data=data to the API\n *@returns response from the API\n */\n\n\nfunction service(urlendpoint = \"\", httpmethod = \"\", data = \"\", file = 0, loading = 1) {\n  //  console.log(urlendpoint, \" : ApiService : \", httpmethod);\n  if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n    document.getElementById(\"loading-icon\").setAttribute(\"style\", \"display:block;\");\n  }\n\n  return fetch(urlendpoint, headers(data, httpmethod)).then(result => {\n    // console.log(\"service  : \", result);\n    if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n      document.getElementById(\"loading-icon\").setAttribute(\"style\", \"display:none;\");\n    }\n\n    return file ? result.blob() : result.json();\n  }).catch(error => {\n    console.log(\"Error service : \", error);\n\n    if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n      document.getElementById(\"loading-icon\").setAttribute(\"style\", \"display:none;\");\n    }\n\n    return null;\n  });\n}\n/*\n *Getting headers for the Ajax\n *@param data =data to the API\n *@param httpmethod=METHOD\n *returns headers for the Ajax\n */\n\n\nfunction headers(data, httpmethod) {\n  var header = {\n    // *GET, POST, PUT, DELETE, etc.\n    method: httpmethod,\n    // no-cors, cors, *same-origin\n    // mode: \"no-cors\",\n    // withCredentials: true,\n    // *default, no-cache, reload, force-cache, only-if-cached\n    //cache: \"no-cache\",\n    // include, *same-origin, omit\n    // credentials: \"same-origin\",\n    headers: {\n      //\"Content-Type\": \"application/json\",\n      //\"Authorization\": \"Bearer aAqbVgy30qDmSqT0m32rB2xON0EE_3OW\",\n      //'Access-Control-Allow-Origin': '*',\n      //\"Authorization-id\": Authorization_id,\n      // \"Language-id\" : reduxState.active_language,\n      // 'X-Authenticated-Userid': '15000500000@1',\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\" // 'Content-Type': \"multipart/form-data; charset=utf-8; boundary=\" + Math.random().toString().substr(2),\n\n    } // manual, *follow, error\n    // redirect: \"follow\",\n    // no-referrer, *client\n    //referrer: \"no-referrer\",\n\n  };\n\n  if (httpmethod !== \"GET\") {\n    // body data type must match \"Content-Type\" header\n    //console.log(httpmethod, \" : body : \", data);\n    //  header.body = JSON.stringify(data);\n    var formBody = [];\n\n    for (var property in data) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(data[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n\n    formBody = formBody.join(\"&\");\n    header.body = formBody;\n  }\n\n  return header;\n}","map":{"version":3,"sources":["C:/Users/Suresh/Desktop/Projects/GRProject/GR-Project/src/Services/ApiServices.js"],"names":["proxy_url","APICALL","service","serviceForSitesJSON","headers","get_url_extension","url","split","pop","trim","urlendpoint","httpmethod","data","fetch","process","env","REACT_APP_serverURL","then","result","json","file","loading","document","getElementById","setAttribute","blob","catch","error","console","log","header","method","formBody","property","encodedKey","encodeURIComponent","encodedValue","push","join","body"],"mappings":"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","sourcesContent":["/**\n * Below is the usage of service function\n * import APICALL from {../give-proper-path-whearver you are importing it}\n * URLENDPOINT is the ENDPOINT of the API CAll\n * httpmethod can be GET, PUT, POST, DELETE etc.\n * data is the json object which you want to send to the backend using post, put, delete and update methods\n * APICALL.service(URLENDPOINT, httpmethod, data)\n *  .then(result => {\n *  use ur result.json()  object here whatever you want to do.\n * })\n */\nconst proxy_url = \"https://cors-anywhere.herokuapp.com/\";\n\nexport const APICALL = {\n  service,\n  serviceForSitesJSON,\n  headers,\n  get_url_extension,\n  proxy_url,\n};\nfunction get_url_extension(url) {\n  return url.split(/[#?]/)[0].split(\".\").pop().trim();\n}\n\n/*\nthis is for the fetch which will return the sites JSON,which will be executed bofore fetching the ,\nsince at that time we're using env file to get the backend url,\ntherefore writing a separate function for that.\n*/\n\n/*\n *Call to the API\n *@param urlendpoint=urlendpoint of the API\n *@param httpmethod=METHOD\n *@param data=data to the API\n *@returns response from the APIsettings\n */\nfunction serviceForSitesJSON(urlendpoint = \"\", httpmethod = \"\", data = \"\") {\n  // Default options are marked with *\n  return fetch(\n    process.env.REACT_APP_serverURL + urlendpoint,\n    headers(data, httpmethod)\n  )\n    .then(\n      // parses JSON response into native Javascript objects\n      (result) => result.json()\n    )\n    .then((result) => {\n      return result;\n    });\n}\n/*\n *Call to the API\n *@param urlendpoint=urlendpoint of the API\n *@param httpmethod=METHOD\n *@param data=data to the API\n *@returns response from the API\n */\nfunction service(\n  urlendpoint = \"\",\n  httpmethod = \"\",\n  data = \"\",\n  file = 0,\n  loading = 1\n) {\n  //  console.log(urlendpoint, \" : ApiService : \", httpmethod);\n  if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n    document\n      .getElementById(\"loading-icon\")\n      .setAttribute(\"style\", \"display:block;\");\n  }\n  return fetch(urlendpoint, headers(data, httpmethod))\n    .then((result) => {\n      // console.log(\"service  : \", result);\n      if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n        document\n          .getElementById(\"loading-icon\")\n          .setAttribute(\"style\", \"display:none;\");\n      }\n      return file ? result.blob() : result.json();\n    })\n    .catch((error) => {\n      console.log(\"Error service : \", error);\n      if (loading === 1 && document.getElementById(\"loading-icon\") !== null) {\n        document\n          .getElementById(\"loading-icon\")\n          .setAttribute(\"style\", \"display:none;\");\n      }\n      return null;\n    });\n}\n/*\n *Getting headers for the Ajax\n *@param data =data to the API\n *@param httpmethod=METHOD\n *returns headers for the Ajax\n */\nfunction headers(data, httpmethod) {\n  var header = {\n    // *GET, POST, PUT, DELETE, etc.\n    method: httpmethod,\n    // no-cors, cors, *same-origin\n    // mode: \"no-cors\",\n    // withCredentials: true,\n    // *default, no-cache, reload, force-cache, only-if-cached\n    //cache: \"no-cache\",\n    // include, *same-origin, omit\n    // credentials: \"same-origin\",\n    headers: {\n      //\"Content-Type\": \"application/json\",\n      //\"Authorization\": \"Bearer aAqbVgy30qDmSqT0m32rB2xON0EE_3OW\",\n      //'Access-Control-Allow-Origin': '*',\n      //\"Authorization-id\": Authorization_id,\n      // \"Language-id\" : reduxState.active_language,\n\n      // 'X-Authenticated-Userid': '15000500000@1',\n\n      \"Content-Type\": \"application/x-www-form-urlencoded;charset=UTF-8\",\n      // 'Content-Type': \"multipart/form-data; charset=utf-8; boundary=\" + Math.random().toString().substr(2),\n    },\n    // manual, *follow, error\n    // redirect: \"follow\",\n    // no-referrer, *client\n    //referrer: \"no-referrer\",\n  };\n  if (httpmethod !== \"GET\") {\n    // body data type must match \"Content-Type\" header\n    //console.log(httpmethod, \" : body : \", data);\n    //  header.body = JSON.stringify(data);\n    var formBody = [];\n    for (var property in data) {\n      var encodedKey = encodeURIComponent(property);\n      var encodedValue = encodeURIComponent(data[property]);\n      formBody.push(encodedKey + \"=\" + encodedValue);\n    }\n    formBody = formBody.join(\"&\");\n    header.body = formBody;\n  }\n  return header;\n}\n"]},"metadata":{},"sourceType":"module"}