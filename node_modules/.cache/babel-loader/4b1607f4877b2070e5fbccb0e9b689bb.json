{"ast":null,"code":"// import React, { useState, useReducer } from 'react';\nlet user = localStorage.getItem(\"currentUser\") ? JSON.parse(localStorage.getItem(\"currentUser\"))['username'] : \"\";\nlet token = localStorage.getItem(\"currentUser\") ? JSON.parse(localStorage.getItem(\"currentUser\"))['uuid'] : \"\";\nexport const initialState = {\n  user: \"\" || user,\n  token: \"\" || token,\n  loading: false,\n  errorMessage: null\n};\nexport const AuthReducer = (initialState, action) => {\n  switch (action.type) {\n    case \"REQUEST_LOGIN\":\n      return { ...initialState,\n        loading: true\n      };\n\n    case \"LOGIN_SUCCESS\":\n      return { ...initialState,\n        user: action.payload.username,\n        token: action.payload.uuid,\n        loading: false,\n        errorMessage: ''\n      };\n\n    case \"LOGOUT\":\n      return { ...initialState,\n        user: \"\",\n        token: \"\"\n      };\n\n    case \"SESSION_TIMEOUT\":\n      return { ...initialState,\n        user: \"\",\n        token: \"\",\n        errorMessage: 'Session timeout'\n      };\n\n    case \"LOGIN_ERROR\":\n      return { ...initialState,\n        loading: false,\n        errorMessage: action.error\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n_c = AuthReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthReducer\");","map":{"version":3,"sources":["C:/Users/Suresh/Desktop/Projects/GRProject/GR-Project/src/Context/reducer.js"],"names":["user","localStorage","getItem","JSON","parse","token","initialState","loading","errorMessage","AuthReducer","action","type","payload","username","uuid","error","Error"],"mappings":"AAAA;AAEA,IAAIA,IAAI,GAAGC,YAAY,CAACC,OAAb,CAAqB,aAArB,IACPC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,EAAgD,UAAhD,CADO,GAER,EAFH;AAGA,IAAIG,KAAK,GAAGJ,YAAY,CAACC,OAAb,CAAqB,aAArB,IACRC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,aAArB,CAAX,EAAgD,MAAhD,CADQ,GAET,EAFH;AAKA,OAAO,MAAMI,YAAY,GAAG;AAC1BN,EAAAA,IAAI,EAAE,MAAMA,IADc;AAE1BK,EAAAA,KAAK,EAAE,MAAMA,KAFa;AAG1BE,EAAAA,OAAO,EAAE,KAHiB;AAI1BC,EAAAA,YAAY,EAAE;AAJY,CAArB;AAOP,OAAO,MAAMC,WAAW,GAAG,CAACH,YAAD,EAAeI,MAAf,KAA0B;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EACL,GAAGL,YADE;AAELC,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAK,eAAL;AACE,aAAO,EACL,GAAGD,YADE;AAELN,QAAAA,IAAI,EAAEU,MAAM,CAACE,OAAP,CAAeC,QAFhB;AAGLR,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeE,IAHjB;AAILP,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,YAAY,EAAE;AALT,OAAP;;AAOF,SAAK,QAAL;AACE,aAAO,EACL,GAAGF,YADE;AAELN,QAAAA,IAAI,EAAE,EAFD;AAGLK,QAAAA,KAAK,EAAE;AAHF,OAAP;;AAKF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGC,YADE;AAELN,QAAAA,IAAI,EAAE,EAFD;AAGLK,QAAAA,KAAK,EAAE,EAHF;AAILG,QAAAA,YAAY,EAAE;AAJT,OAAP;;AAMF,SAAK,aAAL;AACE,aAAO,EACL,GAAGF,YADE;AAELC,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,YAAY,EAAEE,MAAM,CAACK;AAHhB,OAAP;;AAMF;AACE,YAAM,IAAIC,KAAJ,CAAW,0BAAyBN,MAAM,CAACC,IAAK,EAAhD,CAAN;AAnCJ;AAqCD,CAtCM;KAAMF,W","sourcesContent":["// import React, { useState, useReducer } from 'react';\n\nlet user = localStorage.getItem(\"currentUser\")\n  ? JSON.parse(localStorage.getItem(\"currentUser\"))['username']\n\t: \"\";\nlet token = localStorage.getItem(\"currentUser\")\n  ? JSON.parse(localStorage.getItem(\"currentUser\"))['uuid']\n\t: \"\";\n\n\nexport const initialState = {\n  user: \"\" || user,\n  token: \"\" || token,\n  loading: false,\n  errorMessage: null,\n};\n\nexport const AuthReducer = (initialState, action) => {\n  switch (action.type) {\n    case \"REQUEST_LOGIN\":\n      return {\n        ...initialState,\n        loading: true,\n      };\n    case \"LOGIN_SUCCESS\":\n      return {\n        ...initialState,\n        user: action.payload.username,\n        token: action.payload.uuid,\n        loading: false,\n        errorMessage: '',\n      };\n    case \"LOGOUT\":\n      return {\n        ...initialState,\n        user: \"\",\n        token: \"\",\n      };\n    case \"SESSION_TIMEOUT\":\n      return {\n        ...initialState,\n        user: \"\",\n        token: \"\",\n        errorMessage: 'Session timeout',\n      };\n    case \"LOGIN_ERROR\":\n      return {\n        ...initialState,\n        loading: false,\n        errorMessage: action.error,\n      };\n\n    default:\n      throw new Error(`Unhandled action type: ${action.type}`);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}